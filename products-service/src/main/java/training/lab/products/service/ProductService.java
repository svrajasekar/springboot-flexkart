package training.lab.products.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import training.lab.products.exception.CrudException;
import training.lab.products.exception.ResourceNotFoundException;
import training.lab.products.model.Product;
import training.lab.products.repository.ProductRepository;

import javax.transaction.Transactional;
import java.util.List;

@Service
public class ProductService {

    @Autowired
    private ProductRepository productRepository;

    public List<Product> getProducts() {
        return productRepository.findAll();
    }

    public Product getProduct(Long productId) {
        if (null == productId || productId <= 0) {
            throw new CrudException("Product Id Is Invalid");
        }
        Product product = null;
        try {
            product = productRepository.findById(productId).get();
        } catch (Exception ex) {
            throw new ResourceNotFoundException("Product Record Id: " + productId + " Not Found In The Database");
        }
        return product;
    }

    @Transactional
    public Product saveProduct(Product product) {
        if (null == product) {
            throw new CrudException("Request Parameters Not Found In The Request Body");
        }
        if (!(null == product.getProductId())) {
            throw new CrudException("Remove the Product Id From The Request Body. It Will Be Auto Generated By The System");
        }
        Product newProduct = null;
        try {
            newProduct = productRepository.save(product);
        } catch(Exception ex) {
            throw new CrudException("Error While Inserting The Record In To The Database");
        }
        return newProduct;
    }

    @Transactional
    public Product updateProduct(Product product) {
        if (null == product) {
            throw new CrudException("Request Parameters Not Found In The Request Body");
        }
        if (null == product.getProductId()) {
            throw new CrudException("Product Id Is Missing In The Request Body");
        }
        Product updatedProduct = null;
        try {
            updatedProduct = productRepository.save(product);
        } catch(Exception ex) {
            throw new CrudException("Error While Updating The Record In To The Database");
        }
        return updatedProduct;
    }

    @Transactional
    public void deleteProduct(Long productId) {
        if (null == productId || productId <= 0) {
            throw new CrudException("Product Id Is Invalid");
        }
        try {
            productRepository.deleteById(productId);
        } catch(Exception ex) {
            throw new ResourceNotFoundException("Product Record Id: " + productId + " Not Found In The Database");
        }
    }
}
