package training.lab.product.taxes.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import training.lab.product.taxes.model.Tax;
import training.lab.product.taxes.repository.TaxRepository;
import training.lab.product.taxes.exception.CrudException;
import training.lab.product.taxes.exception.ResourceNotFoundException;

import javax.transaction.Transactional;
import java.util.List;

@Service
public class TaxService {

    @Autowired
    private TaxRepository taxRepository;

    public List<Tax> getTaxes() {
        return taxRepository.findAll();
    }

    public Tax getTax(Long taxId) {
        if (null == taxId || taxId <= 0) {
            throw new CrudException("Tax Id Is Invalid");
        }
        Tax tax = null;
        try {
            tax = taxRepository.findById(taxId).get();
        } catch (Exception ex) {
            throw new ResourceNotFoundException("Tax Record Id: " + taxId + " Not Found In The Database");
        }
        return tax;
    }

    @Transactional
    public Tax saveTax(Tax tax) {
        if (null == tax) {
            throw new CrudException("Request Parameters Not Found In The Request Body");
        }
        if (!(null == tax.getTaxId())) {
            throw new CrudException("Remove the Tax Id From The Request Body. It Will Be Auto Generated By The System");
        }
        Tax newTax = null;
        try {
            newTax = taxRepository.save(tax);
        } catch(Exception ex) {
            throw new CrudException("Error While Inserting The Record In To The Database");
        }
        return newTax;
    }

    @Transactional
    public Tax updateTax(Tax tax) {
        if (null == tax) {
            throw new CrudException("Request Parameters Not Found In The Request Body");
        }
        if (null == tax.getTaxId()) {
            throw new CrudException("Tax Id Is Missing In The Request Body");
        }
        Tax updatedTax = null;
        try {
            updatedTax = taxRepository.save(tax);
        } catch(Exception ex) {
            throw new CrudException("Error While Updating The Record In To The Database");
        }
        return updatedTax;
    }

    @Transactional
    public void deleteTax(Long taxId) {
        if (null == taxId || taxId <= 0) {
            throw new CrudException("Tax Id Is Invalid");
        }
        try {
            taxRepository.deleteById(taxId);
        } catch(Exception ex) {
            throw new ResourceNotFoundException("Tax Record Id: " + taxId + " Not Found In The Database");
        }
    }
}
